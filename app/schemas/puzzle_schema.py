from pydantic import BaseModel
from typing import Optional, Any, List
from uuid import UUID
from datetime import datetime

from app.schemas.unit_schema import UnitCreate
from app.schemas.node_schema import NodeCreate
from app.schemas.edge_schema import EdgeCreate

# Data sent by user/AI
class PuzzleCreate(BaseModel):
    name: str
    model: str
    enemy_count: int
    player_unit_count: int
    game_mode: str
    node_count: int
    edge_count: int
    turns: Optional[int]
    coins: Optional[int] # this will be generated by AI
    units: Optional[List[UnitCreate]] = []
    nodes: Optional[List[NodeCreate]] = [] # this will be generated by AI
    edges: Optional[List[EdgeCreate]] = [] # this will be generated by AI

# Data returns by API
class PuzzleResponse(PuzzleCreate):
    id: UUID
    created_at: datetime


    class Config:
        orm_mode = True # read directly form SQLAlchemy objects (Pydantic)


